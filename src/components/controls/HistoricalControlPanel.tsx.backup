import React, { useState, useRef, useEffect } from "react";
import { HistoricalControlPanelProps } from "../../types";
import DateRangeSelector from "./DateRangeSelector";
import TemporalTimeline from "./TemporalTimeline";
import TemporalPlaybackControls from "./TemporalPlaybackControls";

const HistoricalControlPanel: React.FC<
  HistoricalControlPanelProps & {
    onLoadData?: () => void;
    onSeekToDate?: (date: string) => void;
    onGoToPrevious?: () => void;
    onGoToNext?: () => void;
    onToggleHistoricalMode?: () => void;
  }
> = ({
  isVisible,
  onClose,
  state,
  controls,
  onLoadData,
  onSeekToDate,
  onGoToPrevious,
  onGoToNext,
  onToggleHistoricalMode,
}) => {
  const [isExpanded, setIsExpanded] = useState(true);
  const [isPanelVisible, setIsPanelVisible] = useState(true);
  const panelRef = useRef<HTMLDivElement>(null);

  // Fermer le panel en cliquant à l'extérieur
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        panelRef.current &&
        !panelRef.current.contains(event.target as Node)
      ) {
        setIsPanelVisible(false);
      }
    };

    if (isVisible && isPanelVisible) {
      document.addEventListener("mousedown", handleClickOutside);
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isVisible, isPanelVisible]);

  // Réinitialiser la visibilité du panel quand le mode historique est activé
  useEffect(() => {
    if (isVisible) {
      setIsPanelVisible(true);
    }
  }, [isVisible]);

  if (!isVisible) return null;

  const handleLoadData = () => {
    if (state.startDate && state.endDate && !state.loading && onLoadData) {
      onLoadData();
    }
  };

  const isDataReady = state.startDate && state.endDate && !state.loading;
  const hasError = state.error !== null;

  return (
    <>
      {/* Panel principal */}
      {isPanelVisible && (
        <div
          ref={panelRef}
          className="fixed top-4 right-4 z-[2000] bg-white border border-gray-300 rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-hidden"
        >
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200 bg-gray-50">
        <div className="flex items-center space-x-2">
          <svg
            className="w-5 h-5 text-blue-600"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
          <h3 className="text-lg font-semibold text-gray-900">
            Mode Historique
          </h3>
        </div>
        <div className="flex items-center space-x-2">
          <button
            type="button"
            onClick={() => setIsExpanded(!isExpanded)}
            className="p-1 text-gray-400 hover:text-gray-600 transition-colors"
            title={isExpanded ? "Réduire" : "Développer"}
          >
            <svg
              className={`w-4 h-4 transition-transform ${
                isExpanded ? "rotate-180" : ""
              }`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M19 9l-7 7-7-7"
              />
            </svg>
          </button>
          <button
            type="button"
            onClick={() => setIsPanelVisible(false)}
            className="p-1 text-gray-400 hover:text-gray-600 transition-colors"
            title="Masquer le panel"
          >
            <svg
              className="w-4 h-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
          {onToggleHistoricalMode && (
            <button
              type="button"
              onClick={onToggleHistoricalMode}
              className="p-1 text-red-400 hover:text-red-600 transition-colors"
              title="Désactiver le mode historique"
            >
              <svg
                className="w-4 h-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
            </button>
          )}
        </div>
      </div>

      {/* Content */}
      {isExpanded && (
        <div className="p-4 space-y-4 max-h-[calc(90vh-80px)] overflow-y-auto">
          {/* Instructions */}
          <div className="text-sm text-gray-600 bg-blue-50 p-3 rounded-md">
            <div className="flex items-start space-x-2">
              <svg
                className="w-4 h-4 text-blue-600 mt-0.5 flex-shrink-0"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
              <div>
                <p className="font-medium text-blue-800">
                  Sélectionnez une période pour analyser les données historiques
                </p>
                <p className="text-blue-700 mt-1">
                  Les marqueurs actuels seront remplacés par les données de la
                  période sélectionnée.
                </p>
              </div>
            </div>
          </div>

          {/* Sélecteur de dates */}
          <DateRangeSelector
            startDate={state.startDate}
            endDate={state.endDate}
            onStartDateChange={controls.onStartDateChange}
            onEndDateChange={controls.onEndDateChange}
            maxDateRange={365}
            disabled={state.loading}
          />

          {/* État de chargement */}
          {state.loading && (
            <div className="flex items-center space-x-2 text-blue-600">
              <svg
                className="animate-spin w-4 h-4"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="4"
                />
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                />
              </svg>
              <span className="text-sm">
                Chargement des données historiques...
              </span>
            </div>
          )}

          {/* Erreur */}
          {hasError && (
            <div className="flex items-center space-x-2 text-red-600 bg-red-50 p-3 rounded-md">
              <svg
                className="w-4 h-4 flex-shrink-0"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
              <span className="text-sm">{state.error}</span>
            </div>
          )}

          {/* Bouton de chargement */}
          <div className="flex space-x-2">
            <button
              type="button"
              onClick={handleLoadData}
              disabled={!isDataReady || state.loading}
              className={`
                flex-1 px-4 py-2 rounded-md font-medium text-sm transition-colors
                ${
                  isDataReady && !state.loading
                    ? "bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    : "bg-gray-300 text-gray-500 cursor-not-allowed"
                }
              `}
            >
              {state.loading ? "Chargement..." : "Charger les données"}
            </button>

            <button
              type="button"
              onClick={controls.onReset}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm font-medium"
            >
              Réinitialiser
            </button>
          </div>

          {/* Informations sur les données */}
          {state.data.length > 0 && (
            <div className="bg-green-50 p-3 rounded-md">
              <div className="flex items-center space-x-2 text-green-800">
                <svg
                  className="w-4 h-4"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M5 13l4 4L19 7"
                  />
                </svg>
                <span className="text-sm font-medium">
                  Données chargées : {state.data.length} points temporels
                </span>
              </div>
            </div>
          )}

          {/* Contrôles de navigation temporelle */}
          {state.data.length > 0 && (
            <div className="space-y-4 border-t border-gray-200 pt-4">
              <div className="text-sm font-medium text-gray-700">
                Navigation temporelle
              </div>

              {/* Timeline */}
              <TemporalTimeline
                startDate={state.startDate}
                endDate={state.endDate}
                currentDate={state.currentDate}
                dataPoints={state.data}
                onSeek={onSeekToDate || controls.onCurrentDateChange}
                timeStep={state.timeStep}
                disabled={state.loading}
              />

              {/* Contrôles de lecture */}
              <TemporalPlaybackControls
                isPlaying={state.isPlaying}
                currentDate={state.currentDate}
                startDate={state.startDate}
                endDate={state.endDate}
                playbackSpeed={state.playbackSpeed}
                onPlayPause={controls.onPlayPause}
                onStop={() => {
                  controls.onPlayPause(); // Arrêter la lecture
                  controls.onCurrentDateChange(state.startDate); // Revenir au début
                }}
                onSpeedChange={controls.onSpeedChange}
                onSeek={onSeekToDate || controls.onCurrentDateChange}
                onPrevious={
                  onGoToPrevious ||
                  (() => {
                    const currentIndex = state.data.findIndex(
                      (point) => point.timestamp === state.currentDate
                    );
                    if (currentIndex > 0) {
                      controls.onCurrentDateChange(
                        state.data[currentIndex - 1].timestamp
                      );
                    }
                  })
                }
                onNext={
                  onGoToNext ||
                  (() => {
                    const currentIndex = state.data.findIndex(
                      (point) => point.timestamp === state.currentDate
                    );
                    if (currentIndex < state.data.length - 1) {
                      controls.onCurrentDateChange(
                        state.data[currentIndex + 1].timestamp
                      );
                    }
                  })
                }
                disabled={state.loading}
                dataPointsCount={state.data.length}
              />
            </div>
          )}
        </div>
      )}

      {/* Bouton pour rouvrir le panel quand il est masqué */}
      {!isPanelVisible && (
        <button
          onClick={() => setIsPanelVisible(true)}
          className="fixed top-4 right-4 z-[2001] bg-blue-600 text-white p-3 rounded-full shadow-lg hover:bg-blue-700 transition-colors"
          title="Rouvrir le panel de contrôle historique"
        >
          <svg
            className="w-5 h-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
        </button>
      )}
    </>
  );
};

export default HistoricalControlPanel;
